test_that("check output krig pdf",{
expect_equal(any(grepl("Clusters.pdf",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.pdf",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "bilinear")
test_that("check output bilinear",{
expect_equal(any(grepl("Interpolation-bilinear",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bilinear",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "bicubic")
test_that("check output bicubic",{
expect_equal(any(grepl("Interpolation-bicubic",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bicubic",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "idw")
test_that("check output idw",{
expect_equal(any(grepl("Interpolation-idw",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-idw",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "nn")
test_that("check output nn",{
expect_equal(any(grepl("Interpolation-nn",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-nn",list.files())])
xy <- read.delim(system.file("/files/coords1592.txt",package="pophelperSpatial"),header=F)
alist <- readQ(afiles)
plotRunsInterpolate(alist[2],xy)
test_that("check output krig",{
expect_equal(any(grepl("Interpolation-krig",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-krig",list.files())])
plotRunsInterpolate(alist[2],xy,imgtype="jpeg")
test_that("check output krig jpeg",{
expect_equal(any(grepl("Clusters.jpg",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.jpg",list.files())])
plotRunsInterpolate(alist[2],xy,imgtype="pdf")
test_that("check output krig pdf",{
expect_equal(any(grepl("Clusters.pdf",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.pdf",list.files())])
plotRunsInterpolate(alist[2],xy,method = "bilinear")
test_that("check output bilinear",{
expect_equal(any(grepl("Interpolation-bilinear",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bilinear",list.files())])
plotRunsInterpolate(alist[2],xy,method = "bicubic")
test_that("check output bicubic",{
expect_equal(any(grepl("Interpolation-bicubic",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bicubic",list.files())])
plotRunsInterpolate(alist[2],xy,method = "idw")
test_that("check output idw",{
expect_equal(any(grepl("Interpolation-idw",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-idw",list.files())])
plotRunsInterpolate(alist[2],xy,method = "nn")
test_that("check output nn",{
expect_equal(any(grepl("Interpolation-nn",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-nn",list.files())])
alist <- readQ(afiles)
plotRunsInterpolate(alist[2],xy)
afiles
alist <- readQ(afiles)
alist
str(alist)
afiles <- list.files(path=system.file("files/admixture",package="pophelperSpatial"),full.names=TRUE)
afiles
sfiles <- list.files(path=system.file("files/structure",package="pophelperSpatial"),full.names=TRUE)
sfiles1 <- list.files(path=system.file("files/structure-ci",package="pophelperSpatial"),full.names=TRUE)
#read sample TESS files from R package
tfiles <- list.files(path=system.file("files/tess",package="pophelperSpatial"),full.names=TRUE)
#read sample ADMIXTURE files from R package
afiles <- list.files(path=system.file("files/admixture",package="pophelperSpatial"),full.names=TRUE)
#read sample fastSTRUCTURE files from R package
ffiles <- list.files(path=system.file("files/faststructure",package="pophelperSpatial"),full.names=TRUE)
#read sample MATRIX files from R package
mcfiles <- list.files(path=system.file("files/matrix/comma",package="pophelperSpatial"),full.names=TRUE)
mtfiles <- list.files(path=system.file("files/matrix/tab",package="pophelperSpatial"),full.names=TRUE)
msfiles <- list.files(path=system.file("files/matrix/space",package="pophelperSpatial"),full.names=TRUE)
# plotRunsInterpolate Structure ------------------------------------------------
context("plotRunsInterpolate Structure")
qlist <- readQ(system.file("files/Structure239_4",package="pophelperSpatial"))
xy <- read.delim(system.file("files/coords239.txt",package="pophelperSpatial"),header=FALSE)
plotRunsInterpolate(qlist,xy)
test_that("check output krig",{
expect_equal(any(grepl("Interpolation-krig",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-krig",list.files())])
plotRunsInterpolate(qlist,xy,method = "bilinear")
test_that("check output bilinear",{
expect_equal(any(grepl("Interpolation-bilinear",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bilinear",list.files())])
plotRunsInterpolate(qlist,xy,method = "bicubic")
test_that("check output bicubic",{
expect_equal(any(grepl("Interpolation-bicubic",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bicubic",list.files())])
plotRunsInterpolate(qlist,xy,method = "idw")
test_that("check output idw",{
expect_equal(any(grepl("Interpolation-idw",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-idw",list.files())])
plotRunsInterpolate(qlist,xy,method = "nn")
test_that("check output nn",{
expect_equal(any(grepl("Interpolation-nn",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-nn",list.files())])
# plotRunsInterpolate Tess -----------------------------------------------------
context("plotRunsInterpolate Tess")
xy <- read.delim(system.file("/files/coords75.txt",package="pophelperSpatial"),header=F)
tlist <- readQ(tfiles)
plotRunsInterpolate(tlist[2],xy)
test_that("check output krig",{
expect_equal(any(grepl("Interpolation-krig",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-krig",list.files())])
plotRunsInterpolate(tlist[2],xy,imgtype="jpeg")
test_that("check output krig jpeg",{
expect_equal(any(grepl("Clusters.jpg",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.jpg",list.files())])
plotRunsInterpolate(tlist[2],xy,imgtype="pdf")
test_that("check output krig pdf",{
expect_equal(any(grepl("Clusters.pdf",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.pdf",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "bilinear")
test_that("check output bilinear",{
expect_equal(any(grepl("Interpolation-bilinear",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bilinear",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "bicubic")
test_that("check output bicubic",{
expect_equal(any(grepl("Interpolation-bicubic",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bicubic",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "idw")
test_that("check output idw",{
expect_equal(any(grepl("Interpolation-idw",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-idw",list.files())])
plotRunsInterpolate(tlist[2],xy,method = "nn")
test_that("check output nn",{
expect_equal(any(grepl("Interpolation-nn",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-nn",list.files())])
# plotRunsInterpolate Admixture ------------------------------------------------
context("plotRunsInterpolate Admixture")
xy <- read.delim(system.file("/files/coords1592.txt",package="pophelperSpatial"),header=F)
alist <- readQ(afiles)
plotRunsInterpolate(alist[2],xy)
test_that("check output krig",{
expect_equal(any(grepl("Interpolation-krig",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-krig",list.files())])
plotRunsInterpolate(alist[2],xy,imgtype="jpeg")
test_that("check output krig jpeg",{
expect_equal(any(grepl("Clusters.jpg",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.jpg",list.files())])
plotRunsInterpolate(alist[2],xy,imgtype="pdf")
test_that("check output krig pdf",{
expect_equal(any(grepl("Clusters.pdf",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.pdf",list.files())])
plotRunsInterpolate(alist[2],xy,method = "bilinear")
test_that("check output bilinear",{
expect_equal(any(grepl("Interpolation-bilinear",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bilinear",list.files())])
plotRunsInterpolate(alist[2],xy,method = "bicubic")
test_that("check output bicubic",{
expect_equal(any(grepl("Interpolation-bicubic",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bicubic",list.files())])
plotRunsInterpolate(alist[2],xy,method = "idw")
test_that("check output idw",{
expect_equal(any(grepl("Interpolation-idw",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-idw",list.files())])
plotRunsInterpolate(alist[2],xy,method = "nn")
test_that("check output nn",{
expect_equal(any(grepl("Interpolation-nn",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-nn",list.files())])
context("plotRunsInterpolate fastStructure")
xy <- read.delim(system.file("/files/coords22.txt",package="pophelperSpatial"),header=F)
flist <- readQ(ffiles)
plotRunsInterpolate(flist[2],xy)
test_that("check output krig",{
expect_equal(any(grepl("Interpolation-krig",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-krig",list.files())])
plotRunsInterpolate(flist[2],xy,imgtype="jpeg")
test_that("check output krig jpeg",{
expect_equal(any(grepl("Clusters.jpg",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.jpg",list.files())])
plotRunsInterpolate(flist[2],xy,imgtype="pdf")
test_that("check output krig pdf",{
expect_equal(any(grepl("Clusters.pdf",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Clusters.pdf",list.files())])
plotRunsInterpolate(flist[2],xy,method = "bilinear")
test_that("check output bilinear",{
expect_equal(any(grepl("Interpolation-bilinear",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-bilinear",list.files())])
# plotRunsInterpolate(flist[2],xy,method = "bicubic")
# test_that("check output bicubic",{
#   expect_equal(any(grepl("Interpolation-bicubic",list.files())),TRUE)
# })
# if(deleteoutput) file.remove(list.files()[grep("Interpolation-bicubic",list.files())])
plotRunsInterpolate(flist[2],xy,method = "idw")
test_that("check output idw",{
expect_equal(any(grepl("Interpolation-idw",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-idw",list.files())])
plotRunsInterpolate(flist[2],xy,method = "nn")
test_that("check output nn",{
expect_equal(any(grepl("Interpolation-nn",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Interpolation-nn",list.files())])
context("plotRunsSpatial")
xy <- read.delim(system.file("files/coords239.txt",package="pophelperSpatial"),header=FALSE)
qlist <- readQ(system.file("files/Structure239_4",package="pophelperSpatial"))
plotRunsSpatial(qlist,xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
qlist <- system.file("/files/coords75.txt",package="pophelperSpatial")
plotRunsSpatial(tfiles[2],qlist)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
qlist <- system.file("/files/coords1592.txt",package="pophelperSpatial")
plotRunsSpatial(afiles[2],qlist)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
qlist <- system.file("/files/coords22.txt",package="pophelperSpatial")
plotRunsSpatial(ffiles[2],qlist)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
xy <- read.delim(system.file("/files/coords75.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(tfiles[2],qlist)
tlist <- readQ(tfiles)
plotRunsSpatial(tlist[2],qlist)
plotRunsSpatial(tlist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
plotRunsSpatial(qlist,xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
xy <- read.delim(system.file("/files/coords75.txt",package="pophelperSpatial"),header=F)
tlist <- readQ(tfiles)
plotRunsSpatial(tlist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
xy <- read.delim(system.file("/files/coords1592.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(alist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
xy <- read.delim(system.file("/files/coords22.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(ffiles[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
flist <- readQ(ffiles)
xy <- read.delim(system.file("/files/coords22.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(flist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
plotRunsSpatial(alist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
alist <- readQ(afiles)
xy <- read.delim(system.file("/files/coords1592.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(alist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
context("plotRunsSpatial")
xy <- read.delim(system.file("files/coords239.txt",package="pophelperSpatial"),header=FALSE)
qlist <- readQ(system.file("files/Structure239_4",package="pophelperSpatial"))
plotRunsSpatial(qlist,xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
xy <- read.delim(system.file("/files/coords75.txt",package="pophelperSpatial"),header=F)
tlist <- readQ(tfiles)
plotRunsSpatial(tlist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
alist <- readQ(afiles)
xy <- read.delim(system.file("/files/coords1592.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(alist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
flist <- readQ(ffiles)
xy <- read.delim(system.file("/files/coords22.txt",package="pophelperSpatial"),header=F)
plotRunsSpatial(flist[2],xy)
test_that("check output",{
expect_equal(any(grepl("Spatial.png",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("Spatial.png",list.files())])
setwd("D:/Data/Dropbox/Rwork/pophelperSpatialRPackage/working/demo")
#read sample STRUCTURE files from R package
sfiles <- list.files(path=system.file("files/structure",package="pophelperSpatial"),full.names=TRUE)
sfiles1 <- list.files(path=system.file("files/structure-ci",package="pophelperSpatial"),full.names=TRUE)
#read sample TESS files from R package
tfiles <- list.files(path=system.file("files/tess",package="pophelperSpatial"),full.names=TRUE)
#read sample ADMIXTURE files from R package
afiles <- list.files(path=system.file("files/admixture",package="pophelperSpatial"),full.names=TRUE)
#read sample fastSTRUCTURE files from R package
ffiles <- list.files(path=system.file("files/faststructure",package="pophelperSpatial"),full.names=TRUE)
#read sample MATRIX files from R package
mcfiles <- list.files(path=system.file("files/matrix/comma",package="pophelperSpatial"),full.names=TRUE)
mtfiles <- list.files(path=system.file("files/matrix/tab",package="pophelperSpatial"),full.names=TRUE)
msfiles <- list.files(path=system.file("files/matrix/space",package="pophelperSpatial"),full.names=TRUE)
context("plotRunsInterpolate Structure")
qlist <- readQ(system.file("files/Structure239_4",package="pophelperSpatial"))
xy <- read.delim(system.file("files/coords239.txt",package="pophelperSpatial"),header=FALSE)
plotRunsInterpolate(qlist,xy)
library(testthat)
library(pophelper)
library(pophelperSpatial)
plotRunsInterpolate(qlist,xy)
context("plotRunsInterpolate Structure")
qlist <- readQ(system.file("files/Structure239_4",package="pophelperSpatial"))
xy <- read.delim(system.file("files/coords239.txt",package="pophelperSpatial"),header=FALSE)
plotRunsInterpolate(qlist,xy)
plotRunsInterpolate(qlist,xy,clusters=2)
str(qlist)
plotRunsInterpolate(qlist,xy,clusters=2:3)
plotRunsInterpolate(readQ(sfiles),xy)
plotRunsInterpolate(readQ(sfiles))
plotRunsInterpolate(qlist,xy,coordsratio=2)
plotRunsInterpolate(qlist,xy,idwpower=4)
plotRunsInterpolate(qlist,xy,method="idw",idwpower=4)
plotRunsInterpolate(qlist,xy,nrow=2)
plotRunsInterpolate(qlist,xy,ncol=2)
6/2
getRowsAndCols <- function(numplots=NA,nrow=NA,ncol=NA)
{
if(is.na(numplots)) stop("getRowsAndCols: No input for number of plots.")
if(is.na(nrow) && is.na(ncol))
{
if(numplots==1) return(c(1,1))
if(numplots==2) return(c(1,2))
if(numplots==3) return(c(1,3))
if(numplots==4) return(c(2,2))
if(numplots==5) return(c(2,3))
if(numplots==6) return(c(2,3))
if(numplots==7) return(c(2,4))
if(numplots==8) return(c(2,4))
if(numplots==9) return(c(3,3))
if(numplots==10) return(c(2,5))
if(numplots==11) return(c(3,4))
if(numplots==12) return(c(3,4))
if(numplots==13) return(c(4,4))
if(numplots==14) return(c(4,4))
if(numplots==15) return(c(5,3))
if(numplots==16) return(c(4,4))
if(numplots==17) return(c(5,4))
if(numplots==18) return(c(6,3))
if(numplots==19) return(c(4,5))
if(numplots==20) return(c(4,5))
if(numplots>20) stop("getRowsAndCols: Number of clusters > 20. Specify number of rows and columns for figures manually using the option nrow and ncol arguments.")
}
if(is.na(nrow) && !is.na(ncol))
{
return(c(as.integer(numplots/ncol),ncol))
}
if(!is.na(nrow) && is.na(ncol))
{
return(c(nrow,as.integer(numplots/nrow)))
}
}
getRowsAndCols(2)
getRowsAndCols(3)
getRowsAndCols(22)
dev.off()
getRowsAndCols(8)
getRowsAndCols(8,3)
ceiling
?ceiling
getRowsAndCols <- function(numplots=NA,nrow=NA,ncol=NA)
{
if(is.na(numplots)) stop("getRowsAndCols: No input for number of plots.")
if(is.na(nrow) && is.na(ncol))
{
if(numplots==1) return(c(1,1))
if(numplots==2) return(c(1,2))
if(numplots==3) return(c(1,3))
if(numplots==4) return(c(2,2))
if(numplots==5) return(c(2,3))
if(numplots==6) return(c(2,3))
if(numplots==7) return(c(2,4))
if(numplots==8) return(c(2,4))
if(numplots==9) return(c(3,3))
if(numplots==10) return(c(2,5))
if(numplots==11) return(c(3,4))
if(numplots==12) return(c(3,4))
if(numplots==13) return(c(4,4))
if(numplots==14) return(c(4,4))
if(numplots==15) return(c(5,3))
if(numplots==16) return(c(4,4))
if(numplots==17) return(c(5,4))
if(numplots==18) return(c(6,3))
if(numplots==19) return(c(4,5))
if(numplots==20) return(c(4,5))
if(numplots>20) stop("getRowsAndCols: Number of clusters > 20. Specify number of rows and columns for figures manually using the option nrow and ncol arguments.")
}
if(is.na(nrow) && !is.na(ncol))
{
return(c(ceiling(numplots/ncol),ncol))
}
if(!is.na(nrow) && is.na(ncol))
{
return(c(nrow,ceiling(numplots/nrow)))
}
}
getRowsAndCols(8)
getRowsAndCols(8,3)
getRowsAndCols(10)
getRowsAndCols(10,3)
getRowsAndCols(10,ncol=4)
library(pophelperSpatial)
plotRunsInterpolate(qlist,xy,ncol=2)
library(pophelperSpatial)
plotRunsInterpolate(qlist,xy,ncol=2)
plotRunsInterpolate(qlist,xy,exportplot=F)
plotRunsInterpolate(qlist,xy,showaxis=T,showaxis=F)
plotRunsInterpolate(qlist,xy,showaxis=T,addpoints=F)
source('D:/Data/Dropbox/Rwork/pophelperSpatialRPackage/v100/R/pophelperSpatial.R')
plotRunsInterpolate(qlist,xy,showaxis=T,addpoints=F)
plotRunsInterpolate(qlist,xy,legend=F)
plotRunsInterpolate(qlist,xy,legendpos="right")
plotRunsInterpolate(qlist,xy,legendkeysize=4)
plotRunsInterpolate(qlist,xy,legendkeysize=1)
plotRunsInterpolate(qlist,xy,legendkeysize=0.6)
plotRunsInterpolate(qlist,xy,legendkeysize=0.5)
?ax
?axes
?axis
library(pophelper)
library(pophelperSpatial)
packageDescription("ggplot2", fields="Version")
packageDescription("pophelper", fields="Version")
packageDescription("pophelperSpatial", fields="Version")
slist <- list.files(path=system.file("files/structure",package="pophelperSpatial"),full.names=T)
# convert one file to a qlist
sf <- readQ(files=slist[1])
str(sf)
df1 <- data.frame(Cluster1=c(0.2,0.4,0.6,0.2),Cluster2=c(0.8,0.6,0.4,0.8))
df2 <- data.frame(Cluster1=c(0.3,0.1,0.5,0.6),Cluster2=c(0.7,0.9,0.5,0.4))
# one-element qlist
q1 <- list("sample1"=df1)
str(q1)
# two-element qlist
q2 <- list("sample1"=df1,"sample2"=df2)
str(q2)
coordfile <- system.file("files/coords239.txt",package="pophelperSpatial")
# read coordfile
xy <- read.delim(coordfile,header=F)
str(xy)
q <- readQ(system.file("files/Structure239_4",package="pophelperSpatial"))
xy <- read.delim(system.file("files/coords239.txt",package="pophelperSpatial"),header=F)
plotRunsInterpolate(qlist=q,coords=xy)
setwd("D:/Data/Dropbox/Rwork/pophelperSpatialRPackage/working/demo")
library(testthat)
library(pophelper)
library(pophelperSpatial)
setwd("C:/Users/royfr474/Desktop/demo")
install.packages(c("akima","Cairo","fields","ggplot2","gridExtra","gtable","PBSmapping","spatstat","tidyr"),dependencies=T)
install_github('royfrancis/pophelperSpatial')
library(devtools)
install_github('royfrancis/pophelperSpatial')
install_github('royfrancis/test2')
setwd("C:/Users/royfr474/Desktop/demo")
source('D:/RoyDocs/Dropbox/Rwork/pophelperSpatialRPackage/v100/tests/testmanual/test-all.R')
library(pophelper)
library(pophelperSpatial)
sessionInfo()
